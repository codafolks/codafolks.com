---
import type { HTMLTag, Polymorphic } from "astro/types";

const {
  as: Tag = "button",
  overrideClasses,
  variant = "primary",
  ...rest
} = Astro.props as {
  as: HTMLTag;
  overrideClasses?: string;
  variant?: keyof typeof buttonVariants;
};

const baseButtonClass =
  "rounded-md focus:outline-none focus:ring-2 focus:ring-opacity-75 font-semibold px-4 py-2 inline-flex gap-1 items-center justify-center text-center cursor-pointer";
const buttonVariants = {
  primary: [
    baseButtonClass,
    "bg-gradient-to-r from-pink-500 to-purple-700 text-white hover:from-pink-600 hover:to-purple-800 focus:ring-pink-500",
    overrideClasses,
  ],
  secondary: [
    baseButtonClass,
    "bg-gray-500 text-white hover:bg-gray-600 focus:ring-gray-500",
    overrideClasses,
  ],
  tertiary: [
    baseButtonClass,
    "text-black hover:underline focus:underline",
    overrideClasses,
  ],
  success: [
    baseButtonClass,
    "bg-green-500 text-white hover:bg-green-600 focus:ring-green-500",
    overrideClasses,
  ],
  danger: [
    baseButtonClass,
    "bg-red-500 text-white hover:bg-red-600 focus:ring-red-500",
    overrideClasses,
  ],
  link: [
    baseButtonClass,
    "text-blue-500 hover:text-blue-600 focus:ring-blue-500",
    overrideClasses,
  ],
} as const;

type Props<Tag extends HTMLTag> = Polymorphic<{
  as: Tag;
}> & {
  variant?: keyof typeof buttonVariants;
  overrideClasses?: string;
};
const classList = buttonVariants[variant ?? "primary"];
---

<Tag {...rest} class:list={classList}>
  <slot />
</Tag>
