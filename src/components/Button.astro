---
import type { HTMLTag, Polymorphic } from "astro/types";

const {
  as: Tag = "button",
  overrideClasses,
  variant = "primary",
  ...rest
} = Astro.props as {
  as: HTMLTag;
  overrideClasses?: string;
  variant?: keyof typeof buttonVariants;
};

const baseButtonClass =
  "rounded-md focus:outline-hidden focus:ring-2 focus:ring-opacity-75 font-semibold px-4 py-2 inline-flex gap-1 items-center justify-center text-center cursor-pointer";
const buttonVariants = {
  primary: [
    baseButtonClass,
    "bg-primary text-white hover:bg-primary/80 focus:ring-primary",
    overrideClasses,
  ],
  secondary: [
    baseButtonClass,
    "bg-secondary text-white hover:bg-secondary/80 focus:ring-secondary",
    overrideClasses,
  ],
  tertiary: [
    baseButtonClass,
    "text-dark-gray hover:underline focus:underline bg-white ",
    overrideClasses,
  ],
  success: [
    baseButtonClass,
    "bg-green-500 text-white hover:bg-green-600 focus:ring-green-500",
    overrideClasses,
  ],
  danger: [
    baseButtonClass,
    "bg-red-500 text-white hover:bg-red-600 focus:ring-red-500",
    overrideClasses,
  ],
  link: [
    baseButtonClass,
    "text-white hover:text-white/80 focus:underline ",
    overrideClasses,
  ],
} as const;

type Props<Tag extends HTMLTag> = Polymorphic<{
  as: Tag;
}> & {
  variant?: keyof typeof buttonVariants;
  overrideClasses?: string;
};
const classList = buttonVariants[variant ?? "primary"];
---

<Tag {...rest} class:list={classList}>
  <slot />
</Tag>
